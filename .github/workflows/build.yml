name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags
  workflow_dispatch:  # Allow manual triggers
    inputs:
      version:
        description: 'Version to build (e.g., 1.0.0)'
        required: true
        default: '1.0.0'

permissions:
  contents: write
  packages: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            python-version: '3.12'
          - os: windows-latest
            platform: windows
            python-version: '3.12'
          - os: macos-latest
            platform: macos_intel
            python-version: '3.12'
          - os: macos-latest
            platform: macos_arm64
            python-version: '3.12'

    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executable
      run: |
        python scripts/build_cross_platform.py ${{ matrix.platform }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: RFIDVault-${{ matrix.platform }}
        path: |
          dist/
          RFIDVault_${{ matrix.platform }}.zip
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      id: create_release
      uses: actions/github-script@v7
      with:
        script: |
          const releaseBody = `## RFID Vault ${context.ref.replace('refs/tags/v', '')}
          
          Cross-platform RFID application for Arduino RFID Reader/Writer.
          
          ### Downloads
          
          **Windows:**
          - [RFIDVault_windows.zip](https://github.com/${context.repo.owner}/${context.repo.repo}/releases/download/${context.ref}/RFIDVault_windows.zip)
          
          **macOS Intel:**
          - [RFIDVault_macos_intel.zip](https://github.com/${context.repo.owner}/${context.repo.repo}/releases/download/${context.ref}/RFIDVault_macos_intel.zip)
          
          **macOS Apple Silicon:**
          - [RFIDVault_macos_arm64.zip](https://github.com/${context.repo.owner}/${context.repo.repo}/releases/download/${context.ref}/RFIDVault_macos_arm64.zip)
          
          **Linux:**
          - [RFIDVault_linux.zip](https://github.com/${context.repo.owner}/${context.repo.repo}/releases/download/${context.ref}/RFIDVault_linux.zip)
          
          ### Installation
          
          1. Download the appropriate file for your platform
          2. Extract the ZIP file
          3. Run the launcher script:
             - Windows: Double-click \`LAUNCH.bat\`
             - macOS/Linux: Run \`./LAUNCH.sh\`
          
          ### Features
          
          - Read and save RFID card data
          - Write data to RFID cards
          - Associate UUIDs with custom text
          - Output card data as keyboard input
          - Cross-platform compatibility
          
          ### Requirements
          
          - Arduino with RFID reader/writer
          - USB connection
          - No Python installation required
          
          ### Usage
          
          \`\`\`bash
          # Monitor for cards
          RFIDVault --port COM3 monitor
          
          # Write data to card
          RFIDVault --port COM3 write "Hello World"
          
          # List saved cards
          RFIDVault list-cards
          \`\`\`
          
          ### Support
          
          For issues and questions, please visit the [GitHub repository](https://github.com/${context.repo.owner}/${context.repo.repo}).`;
          
          const release = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: context.ref.replace('refs/tags/', ''),
            name: \`RFID Vault \${context.ref.replace('refs/tags/v', '')}\`,
            body: releaseBody,
            draft: false,
            prerelease: false
          });
          
          core.setOutput('upload_url', release.data.upload_url);

    - name: Upload Release Assets
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          const assets = [
            {
              name: 'RFIDVault_windows.zip',
              path: './artifacts/RFIDVault-windows/RFIDVault_windows.zip'
            },
            {
              name: 'RFIDVault_macos_intel.zip',
              path: './artifacts/RFIDVault-macos_intel/RFIDVault_macos_intel.zip'
            },
            {
              name: 'RFIDVault_macos_arm64.zip',
              path: './artifacts/RFIDVault-macos_arm64/RFIDVault_macos_arm64.zip'
            },
            {
              name: 'RFIDVault_linux.zip',
              path: './artifacts/RFIDVault-linux/RFIDVault_linux.zip'
            }
          ];
          
          for (const asset of assets) {
            if (fs.existsSync(asset.path)) {
              console.log(\`Uploading \${asset.name}...\`);
              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: (await github.rest.repos.getReleaseByTag({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag: context.ref.replace('refs/tags/', '')
                })).data.id,
                name: asset.name,
                data: fs.readFileSync(asset.path),
                headers: {
                  'content-type': 'application/zip'
                }
              });
              console.log(\`Successfully uploaded \${asset.name}\`);
            } else {
              console.log(\`Warning: \${asset.path} not found, skipping upload\`);
            }
          }
